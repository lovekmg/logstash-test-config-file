input {
	file {
		path => "/etc/logstash/conf.d/logstash-test-config-file/inputTestJson.json"
		start_position => "beginning"
		sincedb_path => "/dev/null"         # 매번 처음부터 다시 읽기 위해
		codec => "json"
	}
}

filter {
    # 주문 환불 index
    if [eventType] == "order" {             # if 문은 plugin 밖에서 감싼다
        mutate {
            # 값이 null 일 경우 기본값 설정해줌. null이면 에러나서 지정해주는게 좋을듯. 이미 있는 필드만 가능.
            coerce => { "[context][channel]" => "" }

            # 새로 만드는 필드. 기본값도 정해줌
            add_field => {
                "ordered_at"    => "1001-01-01 00:00:00"
                "paid_at"       => "1001-01-01 00:00:00"
                "refunded_at"   => "1001-01-01 00:00:00"
            }

            # json object의 nested 한 구조를 1차원 구조로 변경하기 위해 copy. 
            # add_field보단 나음(data type 까지 복사함)
            copy => {
                "[context][ordId]"      => "ord_id"
                "[context][type]"       => "ord_type"
                "[context][guestId]"    => "guest_id"
                "[context][payMethod]"  => "pay_method"
                "[context][price]"      => "pay_price"
                "[extra][shop_id]"      => "shop_id"
            }

            # 특정 필드 값을 이미 존재하는 필드에 덮어씌우기
            replace => {
                "channel" => "%{[context][channel]}"
            }

            # elasticsearch index에 맞는 data type 으로 변경
            convert => {
                "pay_price" => "integer"
            }
        }

        # date 값들의 빈값여부에 따라 copy
        if [context][orderDate] != "" {
            mutate {
                replace => { "ordered_at" => "%{[context][orderDate]}" }
            }
        }
        if [context][payDate] != "" {
            mutate {
                replace => { "paid_at" => "%{[context][payDate]}" }
            }
        }
        if [context][refundDate] != "" {
            mutate {
                replace => { "refunded_at" => "%{[context][refundDate]}" }
            }
        }

        # 필요 없는 field는 삭제
        mutate {
            remove_field => [
                "context",
                "extra",
#"@timestamp", 
                "timestamp", 
                "datetime",
#"eventType",
                "level", 
                "pid", 
                "level_name", 
                "host", 
                "@version", 
                "path",
                "prospector",
                "offset",
                "input",
                "source",
                "type",
                "beat",
                "tags"
            ]
        }
    }

    # 상품 주문 환불 index
    if [eventType] == "product" {
        mutate {
            # 값이 null 일 경우 기본값 설정해줌. null이면 에러나서 지정해주는게 좋을듯
            coerce => {
                "[context][channel]" => ""
            }

            # 새로 만드는 필드. 기본값도 정해줌
            add_field => {
                "ordered_at"    => "1001-01-01 00:00:00"
                "paid_at"       => "1001-01-01 00:00:00"
                "refunded_at"   => "1001-01-01 00:00:00"
            }

            # json object의 nested 한 구조를 1차원 구조로 변경하기 위해 copy. 
            # add_field보단 나음(data type 까지 복사함)
            copy => {
                "[context][ordId]"    => "ord_id"
                "[context][type]"     => "ord_type"
                "[context][ordPrdId]" => "ord_prd_id"
                "[context][price]"    => "ord_prd_price"
                "[context][amount]"   => "ord_stock"
                "[context][prdId]"    => "prd_id"
                "[context][guestId]"  => "guest_id"
                "[extra][shop_id]"    => "shop_id"
            }

            # 특정 필드 값을 이미 존재하는 필드에 덮어씌우기
            replace => {
                "channel" => "%{[context][channel]}"
            }

            # elasticsearch index에 맞는 data type 으로 변경
            convert => {
                "ord_prd_id"    => "integer"
                "ord_prd_price" => "integer"
                "ord_stock"     => "integer"
                "prd_id"        => "integer"
            }
        }

        # 주문 일 경우
        if [context][orderDate] != "" {
            mutate {
                replace => { "ordered_at" => "%{[context][orderDate]}" }
            }
        }

        # 결제 일 경우
        if [context][payDate] != "" {
            mutate {
                replace => { "paid_at" => "%{[context][payDate]}" }
            }
        }

        # 환불 일 경우
        if [context][refundDate] != "" {
            mutate {
                replace => { "refunded_at" => "%{[context][refundDate]}" }
            }
        }

        mutate {
            # 필요 없는 field는 삭제
            remove_field => [
                "context",
                "extra",
                "datetime",
#"@timestamp", 
                "timestamp", 
#"eventType",
                "level", 
                "pid", 
                "level_name", 
                "host", 
                "@version", 
                "path",
                "prospector",
                "offset",
                "input",
                "source",
                "type",
                "beat",
                "tags"
            ]
        }
    }

    if [eventType] == "visitor" {
        mutate {
            copy => {
                "[context][guestId]"  => "guest_id"
                "[context][prdId]"    => "prd_id"
                "[extra][shop_id]"    => "shop_id"
                "[extra][referer]"    => "referer"
                "[extra][user_agent]" => "user_agent"
                "[eventDate]"         => "visited_at"
            }

            # 특정 필드 값을 이미 존재하는 필드에 덮어씌우기
            replace => {
                "channel" => "%{[context][channel]}"
            }

            # 필요 없는 field는 삭제
            remove_field => [
                "context",
                "extra",
#"@timestamp", 
                "timestamp", 
                "datetime",
#"eventType",
                "level", 
                "pid", 
                "level_name", 
                "host", 
                "@version", 
                "path",
                "prospector",
                "offset",
                "input",
                "source",
                "type",
                "beat",
                "tags"
            ]
        }
    }

    # index name을 위한 eventDate filtering
    ruby {
        code => 'event.set("indexDate", event.get(%{[eventDate]})[0, 10])'
    }
    mutate {
        gsub => [ "indexDate", "-", "." ]
    }
}

output {
    # filter 의 if 문과 동일하게 elasticsearch index값을 분기 처리해야함
    #if [eventType] == "order" {       # 주문 환불 index
    #    elasticsearch {
    #        hosts => ["localhost:9200"]
    #        index => "mysoho-statistics-order-%{[indexDate]}"
    #    }
    #}
    #if [eventType] == "product" {       # 상품 주문 환불 index
    #    elasticsearch {
    #        hosts => ["localhost:9200"]
    #        index => "mysoho-statistics-product-order-%{[indexDate]}"
    #    }
    #}
    #if [eventType] == "visitor" {       # 방문자 index
    #    elasticsearch {
    #        hosts => ["localhost:9200"]
    #        index => "mysoho-statistics-visitor-%{[indexDate]}"
    #    }
    #}

	stdout {
		codec => rubydebug
	}
}
